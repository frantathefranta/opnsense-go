// Code generated by internal/generate/api/main.go; DO NOT EDIT.

package quagga

import (
	"context"
	"github.com/browningluke/opnsense-go/pkg/api"
)

var OSPFInterfaceOpts = api.ReqOpts{
	AddEndpoint:         "/quagga/ospfsettings/addInterface",
	GetEndpoint:         "/quagga/ospfsettings/getInterface",
	UpdateEndpoint:      "/quagga/ospfsettings/setInterface",
	DeleteEndpoint:      "/quagga/ospfsettings/delInterface",
	ReconfigureEndpoint: quaggaReconfigureEndpoint,
	Monad:               "interface",
}

// Data structs

type OSPFInterface struct {
	Enabled            string          `json:"enabled"`
	InterfaceName      api.SelectedMap `json:"interfacename"`
	AuthType           api.SelectedMap `json:"authtype"`
	AuthKey            string          `json:"authkey"`
	AuthKeyID          string          `json:"authkey_id"`
	Area               string          `json:"area"`
	Cost               string          `json:"cost"`
	CostDemoted        string          `json:"cost_demoted"`
	HelloInterval      string          `json:"hellointerval"`
	DeadInterval       string          `json:"deadinterval"`
	RetransmitInterval string          `json:"retransmitinterval"`
	RetransmitDelay    string          `json:"retransmitdelay"`
	TransmitDelay      string          `json:"transmitdelay"`
	Priority           string          `json:"priority"`
	BFD                string          `json:"bfd"`
	NetworkType        api.SelectedMap `json:"networktype"`
}

// CRUD operations

func (c *Controller) AddOSPFInterface(ctx context.Context, resource *OSPFInterface) (string, error) {
	return api.Add(c.Client(), ctx, OSPFInterfaceOpts, resource)
}

func (c *Controller) GetOSPFInterface(ctx context.Context, id string) (*OSPFInterface, error) {
	return api.Get(c.Client(), ctx, OSPFInterfaceOpts, &OSPFInterface{}, id)
}

func (c *Controller) UpdateOSPFInterface(ctx context.Context, id string, resource *OSPFInterface) error {
	return api.Update(c.Client(), ctx, OSPFInterfaceOpts, resource, id)
}

func (c *Controller) DeleteOSPFInterface(ctx context.Context, id string) error {
	return api.Delete(c.Client(), ctx, OSPFInterfaceOpts, id)
}
